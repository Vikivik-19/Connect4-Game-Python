#game of connect four project
#made by Vikivik19

import random 

listBoard = [[".",".",".",".",".",".","."], [".",".",".",".",".",".","."],[".",".",".",".",".",".","."]] #rows 0 to 2 
listBoard += [[".",".",".",".",".",".","."], [".",".",".",".",".",".","."],[".",".",".",".",".",".","."]] #rows 3 to 5 

def set_up_game():
    '''set_up_game() -> [player1,marker1,player2,marker2]
    asks the users for player names and markers'''
    
    print("Welcome to Connect 4")
    player1 = str(input("Player 1, please enter your name : " ))
    marker1 = str(input(player1 + ", choose your marker for the game : "))
    player2 = str(input("Player 2, please enter your name : " ))
    marker2 = str(input(player2 + ", choose your marker for the game : "))
    return [player1,player2,marker1,marker2]

        
def print_board() :
    '''print_board() -> None 
    prints the current board and numbers of the columns '''

    print("\n")
    for numberColumn in range (1,8) :
        print(numberColumn, end = " ")
    print("\n")
    
    for row in listBoard :
        for checker in row :
            print(checker, end = " ")
        print("\n")

   
def check_winner(board) :
    '''check_winner(board) -> Boolean 
    returns True if there is a winner, False if no winner '''

    #if 4 identical checkers in a row 
    for row in board: 
        for n in range (1,4):
            if row[n] == row[n+1] == row[n+2] == row[n+3] != "." :
                return (True)
            
    #if 4 identical checkers in a column
    for column in range (7): #for each column
        for n in range (3) :
            if board[n][column] == board[n+1][column] == board[n+2][column] == board[n+3][column] != "." :
                return (True)
            
    #if 4 identical checkers in a diagonal       
    for i in range (3) :
        for n in range (4) :
            if board[i][n] == board[i+1][n+1] == board[i+2][n+2] == board[i+3][n+3] != ".":
                return (True)
            inverseN = 6 - n
            if board[i][inverseN] == board[i+1][inverseN-1] == board[i+2][inverseN-2] == board[i+3][inverseN-3] != ".":
                return (True)          
    else :
        return(False) 
            
def play_game() :
    """play_game() -> None
    Plays an entire game of connect 4"""

    playerList = set_up_game() #playerList contains the names of the players as well as their markers 
    print_board() #we print the empty board
    currentPlayer = random.randrange(2)

    while check_winner(listBoard) == False : #while the winning conditions are not met
         
        currentPlayer = (currentPlayer + 1) % 2 #we go to the other player 
        
        column = int(input(playerList[currentPlayer] + ", you are " + playerList[currentPlayer + 2] + ", in which column do you want to play : ")) #we remind the player of whose turn it is 
        column = column - 1 #we translate the player's input to python numbers 
       
        
        #this is to determine which row is empty for the column the user plays in
        
        row = 5 
        while True :
            if listBoard[row][column] == "." :
                break
            else :
                row = row - 1
                if row < 0 : #if the user played in an already full column
                    column = int(input("Choose another column : ")) #we ask for a new choice 
                    column = column - 1 
                    row = 5 
            
        listBoard[row][column] = playerList[currentPlayer + 2] #we put the marker in the right position 
        print_board() #we print the board
        
         

    print("Congrats! " + playerList[currentPlayer] + ", you have won.") 

        
play_game()              
        
                    
            
        
            
        
            

    
    


    

